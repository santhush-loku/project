{"ast":null,"code":"var _jsxFileName = \"D:\\\\node\\\\project\\\\client\\\\src\\\\components\\\\item-box.component.js\";\nimport React, { Component } from \"react\";\nexport default class ItemBoxComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  base64ArrayBuffer(arrayBuffer) {\n    var base64 = '';\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var bytes = new Uint8Array(arrayBuffer);\n    var byteLength = bytes.byteLength;\n    var byteRemainder = byteLength % 3;\n    var mainLength = byteLength - byteRemainder;\n    var a, b, c, d;\n    var chunk; // Main loop deals with bytes in chunks of 3\n\n    for (var i = 0; i < mainLength; i = i + 3) {\n      // Combine the three bytes into a single integer\n      chunk = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2]; // Use bitmasks to extract 6-bit segments from the triplet\n\n      a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n\n      b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n\n      c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n\n      d = chunk & 63; // 63       = 2^6 - 1\n      // Convert the raw binary segments to the appropriate ASCII encoding\n\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    } // Deal with the remaining bytes and padding\n\n\n    if (byteRemainder == 1) {\n      chunk = bytes[mainLength];\n      a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n      // Set the 4 least significant bits to zero\n\n      b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n      base64 += encodings[a] + encodings[b] + '==';\n    } else if (byteRemainder == 2) {\n      chunk = bytes[mainLength] << 8 | bytes[mainLength + 1];\n      a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n\n      b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n      // Set the 2 least significant bits to zero\n\n      c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n      base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n    }\n\n    return base64;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"data:image/png;base64,\" + String.fromCharCode(this.props.item.photo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/node/project/client/src/components/item-box.component.js"],"names":["React","Component","ItemBoxComponent","constructor","props","base64ArrayBuffer","arrayBuffer","base64","encodings","bytes","Uint8Array","byteLength","byteRemainder","mainLength","a","b","c","d","chunk","i","render","String","fromCharCode","item","photo"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nexport default class ItemBoxComponent extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    base64ArrayBuffer(arrayBuffer) {\r\n        var base64    = ''\r\n        var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\n\r\n        var bytes         = new Uint8Array(arrayBuffer)\r\n        var byteLength    = bytes.byteLength\r\n        var byteRemainder = byteLength % 3\r\n        var mainLength    = byteLength - byteRemainder\r\n\r\n        var a, b, c, d\r\n        var chunk\r\n\r\n        // Main loop deals with bytes in chunks of 3\r\n        for (var i = 0; i < mainLength; i = i + 3) {\r\n            // Combine the three bytes into a single integer\r\n            chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\r\n\r\n            // Use bitmasks to extract 6-bit segments from the triplet\r\n            a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\r\n            b = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12\r\n            c = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6\r\n            d = chunk & 63               // 63       = 2^6 - 1\r\n\r\n            // Convert the raw binary segments to the appropriate ASCII encoding\r\n            base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\r\n        }\r\n\r\n        // Deal with the remaining bytes and padding\r\n        if (byteRemainder == 1) {\r\n            chunk = bytes[mainLength]\r\n\r\n            a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\r\n\r\n            // Set the 4 least significant bits to zero\r\n            b = (chunk & 3)   << 4 // 3   = 2^2 - 1\r\n\r\n            base64 += encodings[a] + encodings[b] + '=='\r\n        } else if (byteRemainder == 2) {\r\n            chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\r\n\r\n            a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\r\n            b = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4\r\n\r\n            // Set the 2 least significant bits to zero\r\n            c = (chunk & 15)    <<  2 // 15    = 2^4 - 1\r\n\r\n            base64 += encodings[a] + encodings[b] + encodings[c] + '='\r\n        }\r\n\r\n        return base64\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"box\">\r\n                <img src={\"data:image/png;base64,\"+String.fromCharCode(this.props.item.photo)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}